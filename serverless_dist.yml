service: ${self:custom.team}-${self:custom.product}-${self:custom.service}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  business: ${file(./config/serverless/environment/${self:custom.stage}.yml):custom.business}
  team: ${file(./config/serverless/environment/${self:custom.stage}.yml):custom.team}
  product: ${file(./config/serverless/environment/${self:custom.stage}.yml):custom.product}
  project: ${file(./config/serverless/environment/${self:custom.stage}.yml):custom.project}
  service: ${file(./config/serverless/environment/${self:custom.stage}.yml):custom.service}
  awsAccount: ${file(./config/serverless/environment/${self:custom.stage}.yml):custom.awsAccount}
  vpc: ${file(./config/serverless/environment/${self:custom.stage}.yml):vpc}
  apigwBinary:
    types:
      - '*/*'

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  runtime: nodejs6.10
  memorySize: 128
  logRetentionInDays: 7
  timeout: 10
  cfLogs: true
  deploymentBucket:
    name: HERE
    serverSideEncryption: AES256
  tags:
    business: ${self:custom.business}
    team: ${self:custom.team}
    product: ${self:custom.product}
    project: ${self:custom.service}
    environment: ${self:custom.stage}

plugins:
  - serverless-apigw-binary
  - serverless-apigwy-binary

functions:
  addImages:
    handler: handler.addImages
    events:
      - http:
          path: add-images
          method: get
  deleteImage:
    handler: handler.deleteImage
    events:
      - http:
          path: delete-image
          method: get
  fetchImage:
    handler: handler.fetchImage
    events:
      - http:
          path: fetch-image
          method: get
          contentHandling: CONVERT_TO_BINARY
  listImages:
    handler: handler.listImages
    events:
      - http:
          path: list-images
          method: get
  resizeImage:
    handler: handler.resizeImage
    events:
      - http:
          path: resize-image
          method: get
          contentHandling: CONVERT_TO_BINARY
  zipImage:
    handler: handler.zipImage
    events:
      - http:
          path: zip-image
          method: get
          contentHandling: CONVERT_TO_BINARY
  zipImages:
    handler: handler.zipImages
    events:
      - http:
          path: zip-images
          method: get
          contentHandling: CONVERT_TO_BINARY
